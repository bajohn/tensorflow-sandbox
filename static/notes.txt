package installed:
install.packages("jsonlite")

normalized random: 
x<-rnorm(10000)


scale, subtracts 'center', then divides by 'scale' param. For example the following returns c(0.0, 0.25, 0.50, 0.75):
x<-c(1,2,3,4)
scale(x, center=1, scale=4)
Default centers around stdev or some such

Create matrix:
x<-c(1,2,3)
y<-c(4,5,6)
cbind(x,y)

first 5, last 5:
head(z)
tail(z)

move to data frame:
df<-data.frame(z)

access column:
df[[1]]

access element:
df[[1]][[2]]

types:
typeof(df)

lists can be mixed types, vectors etc "coerce"/ use "coercion" to make all same type.

apply- can define function(x) or pass function name:
apply(z, 2, max)
apply(z, 2, function(x) x>1)
apply(z, 2, function(x) max(x))

select subsets of data frames:
df<-data.frame(databack)
subset(df, select=c(X6:X12, X14:X22))

Query!
subset(df, X7==716)

sample- returns a bunch of random indices, first arg is range, second arg is how many to return. presumably does not repeat
indices<-sample(1:nrow(scaledvals), round(0.75*nrow(data)))

paste, with collapse: take n-dimensional input, replace "commas" with collapse value. useful for nnet because you want a+b+c+...+z = output
as.formula(paste("outval ~", paste(n[!n %in% "outval"], collapse = " + ")))